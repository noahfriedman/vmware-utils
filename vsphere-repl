#!/usr/bin/env python
# vsphere-repl --- interactive python interpreter with hostd connection

# Author: Noah Friedman <friedman@splode.com>
# Created: 2018-09-05
# Public domain

# $Id: vsphere-repl,v 1.3 2018/09/29 02:51:57 friedman Exp $

# Commentary:
# Code:

from   __future__ import print_function

import sys
import code
import subprocess
import pprint
import vspherelib     as vsl
from   pyVmomi    import vim, vmodl


# This is a hideous hack.
#
# I want attributes to be displayed in sorted order interactively,
# but if you tamper with the order of elements unconditionally, you
# will break SOAP serialization and deserialization.
#
# The pyVmomi.VmomiSupport.FormatObject function is used as the __str__ and
# __repr__ methods.  Modifying the property list order is only safe there.
# How to distinguish?  Look at the stack and see who called us.
#
# While we're at it, get rid of some almost always useless attributes.
# It might have been simpler to set vim.DynamicData._propList=[]
# but I'm not sure what that might break.

import traceback

def _overrideGetPropertyList( orig, traceback=traceback ):
    FormatObject_elide = ( 'dynamicProperty', 'dynamicType' )
    orig_func = orig._GetPropertyList.__func__  # we want the unbound method

    def _GetPropertyList( cls, includeBaseClassProps=True ):
        res = orig_func( cls, includeBaseClassProps=includeBaseClassProps )

        callstack = [ frame[ 2 ] for frame in traceback.extract_stack( None, 2 ) ]
        if callstack[ 0 ] == 'FormatObject':
            for elt in res[:]:  # work on slice since we're modifying list
                if elt.name in FormatObject_elide:
                    res.remove( elt )
            res.sort( key=lambda elt: elt.name )
        return res

    orig._GetPropertyList = classmethod( _GetPropertyList )

_overrideGetPropertyList( vim.ManagedObject )
_overrideGetPropertyList( vim.DataObject )

# Clean up our namespace after patching
del _overrideGetPropertyList
del traceback


# Now on to the repl proper:

args = None
vsi  = None

vp   = vsl.pseudoPropAttr      # alias for brevity
vpa  = vsl.pseudoPropAttr.deep # alias for brevity

def restart():
    reload( vsl )
    global vsi; vsi = vsl.vmomiConnect( args )
    global vp;  vp  = vsl.pseudoPropAttr
    global vpa; vpa = vsl.pseudoPropAttr.deep

repl_pp = pprint.PrettyPrinter( indent=2, width=40 )
def pp( *args, **kwargs ):
    for arg in args:
        repl_pp.pprint( arg, **kwargs )

def bt( *cmd ):
    return subprocess.check_output( cmd ).decode( sys.stdout.encoding ).rstrip( ' \t\r\n' )

def load( filename ):
    with open( filename, 'r' ) as f:
        text = f.read()
    text.replace( '\r\n', '\n' )
    exec( text, globals() )

if __name__ == '__main__':
    args = vsl.ArgumentParser( loadrc=True ).parse()
    vsi  = vsl.vmomiConnect( args )

    banner = '{} {} | {}'.format(
        vsi.si.content.about.apiType,
        vsi.si.content.about.apiVersion,
        vsi.si.content.about.fullName )

    # Don't display 'None' if there is nothing to display.
    sys.displayhook = lambda arg: (arg is None) or pp( arg )
    try:
        code.interact( banner=banner, local=locals(), exitmsg='' )
    except TypeError:
        code.interact( banner=banner, local=locals(), )  # python2.7

# vsphere-repl ends here
