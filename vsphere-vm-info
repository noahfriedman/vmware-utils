#!/usr/bin/env python
# vsphere-vm-info --- retrieve information about registered vm by name

# Author: Noah Friedman <friedman@splode.com>
# Created: 2017-11-02
# Public domain

# $Id: vsphere-vm-info,v 1.9 2018/04/11 19:46:02 friedman Exp $

# Commentary:
# Code:

from __future__ import print_function
from vspherelib import *

def get_args():
    parser = get_args_setup()
    parser.add_argument( '-a', '--all',     action='store_true', help='Retrieve all known VMs' )
    parser.add_argument( '-v', '--verbose', action='store_true', help='Display extended info' )
    parser.add_argument( 'vm', nargs='*',                        help='VM names, if not all' )

    args = parser.parse_args()
    if not args.all and not args.vm:
        printerr( 'Specify VM names or -a (--all)' )
        sys.exit (1)

    return args


def storage_size( storage ):
    comb = storage.committed + storage.uncommitted
    return scale_size( comb )

def plural( text, n ):
    if int( n ) != 1 and int( n ) != -1:
        text += 's'
    return text

def print_vm( si, vm, args, sep="" ):
    stdindent =  -17
    indentL    = stdindent - 3
    indentS    = " " * abs( indentL )
    farindentL = stdindent - 10
    farindentS = " " * abs( farindentL )

    def p( *parm ):
        if parm[1] is None: return
        w = stdindent
        if type( parm[0] ) is int:
            w = parm[0]
            parm = parm[1:]
        nl = 1
        if type(parm[-1]) is str and parm[-1] == "":
            nl   = 0
            parm = parm[0:-1]
        s = '%*s : %s' % (w, parm[0], str.join( " ", map( str, parm[1:] ) ))
        if nl: print( s )
        else:  print( s, end="" )

    def pi( *parm ):
        print( indentS, end="" )
        p( *parm )

    def pf( label, extra, dic, attrs ):
        idx = 0
        if extra:
            p( label, extra )
        else:
            p( label, '' )
            p( farindentL, attrs[0], dic.__dict__[ attrs[0] ] )
            idx = 1
        for attr in attrs[idx:]:
            try:    pi( farindentL, attr, dic.__dict__[ attr ] )
            except: pass

    def pf2( label, dic, attrs ):
        p( label, '' )
        p( farindentL, attrs[0][0], dic.__dict__[ attrs[0][1] ] )
        for a, b in attrs[1:]:
            try:    pi( farindentL, a, dic.__dict__[ b ] )
            except: pass

    vm_conf = vm.config
    hw_conf = vm_conf.hardware

    extraConfig = get_attr_dict( vm_conf.extraConfig )

    numCPU = hw_conf.numCPU
    coreargs = [plural( 'core', numCPU )]
    if hw_conf.numCoresPerSocket:
        nsockets = numCPU / hw_conf.numCoresPerSocket
        coreargs.append( plural('%d socket' % nsockets, nsockets ))
    if vm_conf.cpuHotAddEnabled:    coreargs.append( 'hot add enabled' )
    if vm_conf.cpuHotRemoveEnabled: coreargs.append( 'hot remove enabled' )

    memargs = [scale_size( hw_conf.memoryMB * 1024 * 1024)]
    if vm_conf.memoryHotAddEnabled: memargs.append( 'hot add enabled' )

    folder = get_vm_folder_path( si, vm )

    if vm_conf.template:
        p( 'VM Name', vm.config.name, '    [TEMPLATE]' )
    else:
        p( 'VM Name', vm.config.name )
        hn = vm.guest.hostName
        if hn and hn != vm.config.name:
            p( 'VM Guest Name', hn )

    p( 'VM Id',       'vim.VirtualMachine:' + vm._moId )
    p( 'VM UUID',     vm.config.uuid )
    if args.verbose:
        p( 'Instance Id', vm.config.instanceUuid )
        p( 'Location Id', vm.config.locationId )
        p( 'Config modtime', vm.config.changeVersion )
    p( 'VMX',         vm.config.files.vmPathName )
    p( 'Folder',      folder )
    if vm.resourcePool:
        p( 'Resource Pool', vm.resourcePool.name )

    p( 'Guest type',  vm.guest.guestFullName )
    p( 'HW version',  str.replace( vm.config.version, 'vmx-', '' ))
    p( 'CPU',         numCPU, str.join( ", ", coreargs ) )
    p( 'Memory',      str.join( ", ", memargs ))

    p( 'NICs',        vm.summary.config.numEthernetCards )
    p( 'Disks',       vm.summary.config.numVirtualDisks )
    p( 'Storage',     storage_size( vm.summary.storage ))

    p( 'Hypervisor',  vm.summary.runtime.host.name )
    p( 'Boot delay',  vm.config.bootOptions.bootDelay, "ms" )
    p( 'State',       vm.summary.runtime.powerState )

    if vm.summary.runtime.powerState == "poweredOn":
        p( 'Boot time', vm.summary.runtime.bootTime )

    if args.verbose:
        pf2( 'Tools ', vm.config.tools,
             ( ('Power On' , 'afterPowerOn'),
               ('Resume'   , 'afterResume'),
               ('Standby'  , 'beforeGuestStandby'),
               ('Shutdown' , 'beforeGuestShutdown'),
               ('Reboot'   , 'beforeGuestReboot'),
               ('Upgrade'  , 'toolsUpgradePolicy'),
               ('syncTime' , 'syncTimeWithHost'), ))

    if args.verbose:
        pf( 'Flags', '', vm.config.flags,
            sorted( ( 'disableAcceleration',
                      'enableLogging',
                      'useToe',
                      'runWithDebugInfo',
                      'monitorType',
                      'htSharing',
                      'snapshotDisabled',
                      'snapshotLocked',
                      'diskUuidEnabled',
                      'virtualMmuUsage',
                      'virtualExecUsage',
                      'snapshotPowerOffBehavior',
                      'recordReplayEnabled',
                      'faultToleranceType',
                      'cbrcCacheEnabled', )))

    if args.verbose:
        pf( 'Power Ops', '', vm.config.defaultPowerOps,
            sorted( ( 'powerOffType',
                      'suspendType',
                      'resetType',
                      'defaultPowerOffType',
                      'defaultSuspendType',
                      'defaultResetType',
                      'standbyAction', )))

    if True:
        nics = get_seq_type( hw_conf.device, vim.vm.device.VirtualEthernetCard )
        for nic in nics:
            devtype = type(nic)._wsdlName.replace('Virtual','').lower()
            netlabel = get_network_label( si, nic )
            pf( nic.deviceInfo.label, devtype+' on "'+netlabel+'"' , nic,
                ( 'macAddress', ) )

            if args.verbose:
                pi( farindentL, 'wakeOnLanEnabled',  nic.wakeOnLanEnabled )
                pi( farindentL, 'startConnected',    nic.connectable.startConnected )
                pi( farindentL, 'connected',         nic.connectable.connected )
                pi( farindentL, 'allowGuestControl', nic.connectable.allowGuestControl )

            if vm.summary.runtime.powerState == "poweredOn":
                gnic = filter( lambda g: g.macAddress == nic.macAddress, vm.guest.net )
                if len( gnic ):
                    cidr = get_vmnic_cidrs( gnic[0] )
                    if cidr and len(cidr) > 0:
                        spc  = " " * (abs( farindentL ) + abs( indentL ) + 2)
                        pi( farindentL, 'IP Addresses', cidr[0] )
                        for ip in cidr[1:]:
                            print( spc, ip )

    # This is a custom key I insert into our VMs
    if args.verbose:
        try:
            p( 'Guest json', extraConfig['guestinfo.json'] )
        except: pass

    try:
        annot = vm.config.annotation
        annot = fold_text( annot, maxlen=70, indent=abs( indentL ) )
        if annot.find ("\n") >= 0:
            annot = "\n" + indentS + annot
        if annot != "":
            p( 'Annotation', annot )
    except: pass

    try:
        p( 'Question', vm.summary.runtime.question.text )
    except: pass

    print( sep )


def main():
    args = get_args()
    si   = hconnect( args )

    sep = '-' * 78
    if args.vm:
        vmlist = vmlist_find( si, args.vm )
        for vm in vmlist:
            args.vm.pop()
            if not args.vm:
                sep = ""
            print_vm( si, vm, args, sep=sep )
    else:
        vmlist = get_obj( si, [vim.VirtualMachine] )
        vmlist.sort( cmp=lambda a, b: cmp( a.name, b.name ))
        for vm in vmlist:
            print_vm( si, vm, args, sep=sep )


##########

if __name__ == '__main__':
    main()

# eof
