#!/usr/bin/env python
# vsphere-vm-info --- retrieve information about registered vm by name

# Author: Noah Friedman <friedman@splode.com>
# Created: 2017-11-02
# Public domain

# $Id$

# Commentary:
# Code:

from   __future__ import print_function
from   pyVmomi    import vim

import vspherelib     as vsl
import sys

try:
    long
except NameError:  # python3
    long    = int
    unicode = str

#import httplib
#httplib.HTTPConnection.debuglevel = 1

# ESXi 6.9 and 6.8 are AWS-only, I think.
hw_compat = {
    '16' : [ 'Workstation 15.x', 'Fusion 11.x', 'Player 15.x', ],
    '15' : [ 'ESXi 6.7 U2', 'ESXi 6.8.7', 'ESXi 6.9.1', ],
    '14' : [ 'ESXi 6.7', 'Workstation 14.x', 'Fusion 10.x', 'Player 14.x', ],
    '13' : [ 'ESXi 6.5', ],
    '11' : [ 'ESXi 6.0', 'Workstation 11.x', 'Fusion 7.x',  'Player 7.x', ],
    '10' : [ 'ESXi 5.5', 'Workstation 10.x', 'Fusion 6.x',  'Player 6.x', ],
     '9' : [ 'ESXi 5.1', 'Workstation 9.x',  'Fusion 5.x',  'Player 5.x', ],
     '8' : [ 'ESXi 5.0', 'Workstation 8.x',  'Fusion 4.x',  'Player 4.x', ],
     '7' : [ 'ESXi/ESX 4.x', 'Server 2.x', 'Workstation 6.5.x/7.x', 'Fusion 2.x/3.x', 'Player 3.x', ],
     '6' : [ 'Workstation 6.0.x', ],
     '4' : [ 'ESX 3.x', 'Server 1.x', 'Lab Manager 2.x', 'ACE 2.x', ],
}

proplist = [
    'config.annotation',
    'config.bootOptions.bootDelay',
    'config.cpuHotAddEnabled',
    'config.cpuHotRemoveEnabled',
    'config.files.vmPathName',
    'config.guestFullName',
    'config.hardware.device',
    'config.hardware.memoryMB',
    'config.hardware.numCPU',
    'config.hardware.numCoresPerSocket',
    'config.memoryHotAddEnabled',
    'config.nestedHVEnabled',
    'config.template',
    'config.instanceUuid',
    'config.uuid',
    'config.version',

    'guest.hostName',
    'guest.net',

    'layoutEx.disk',
    'layoutEx.file',
    'layoutEx.snapshot',

    'name',
    'parent',

    #'resourcePool.name',         # separate MO, can't fetch from vm proplist
    'resourcePool',

    'summary.config.numEthernetCards',
    'summary.config.numVirtualDisks',
    'summary.runtime.bootTime',
    #'summary.runtime.host.name', # separate MO, can't fetch from vm proplist
    'summary.runtime.host',

    'summary.runtime.powerState',
    'summary.runtime.question',
    'summary.storage', ]

proplist_verbose = [
    'capability',

    'config.extraConfig',

    'config.locationId',
    'config.changeVersion',
    'config.tools.afterPowerOn',
    'config.tools.afterResume',
    'config.tools.beforeGuestReboot',
    'config.tools.beforeGuestShutdown',
    'config.tools.beforeGuestStandby',
    'config.tools.syncTimeWithHost',
    'config.tools.toolsUpgradePolicy',
    'config.tools.toolsInstallType',
    'config.flags.disableAcceleration',
    'config.flags.diskUuidEnabled',
    'config.flags.enableLogging',
    'config.flags.faultToleranceType',
    'config.flags.htSharing',
    'config.flags.monitorType',
    'config.flags.runWithDebugInfo',
    'config.flags.snapshotDisabled',
    'config.flags.snapshotLocked',
    'config.flags.snapshotPowerOffBehavior',
    'config.flags.virtualExecUsage',
    'config.flags.virtualMmuUsage',
    'config.guestId',
    'config.defaultPowerOps.defaultPowerOffType',
    'config.defaultPowerOps.defaultResetType',
    'config.defaultPowerOps.defaultSuspendType',
    'config.defaultPowerOps.powerOffType',
    'config.defaultPowerOps.resetType',
    'config.defaultPowerOps.standbyAction',
    'config.defaultPowerOps.suspendType',

    'guest.disk',
    'guest.toolsStatus',
    'guest.toolsRunningStatus',
    'guest.toolsVersionStatus',
    'guest.toolsVersionStatus2',
    'guest.toolsVersion',
    'guest.guestState',
    'guest.screen.width',
    'guest.screen.height',
    'guest.ipStack',

    'snapshot',
]

proplist_1line = [
    'config.guestId',
    'config.hardware.memoryMB',
    'config.hardware.numCPU',
    'config.template',
    'config.version',
    'guest.guestId',
    'guest.hostName',
    'guest.ipAddress',
    'guest.net',
    'name',
    'runtime.host',
    'runtime.powerState',
    'summary.storage',
]

moId_types = [ vim.HostSystem, vim.ResourcePool ]
moId_map   = {}
folder_map = None


def get_args():
    p = vsl.ArgumentParser( loadrc=True )
    p.add( '-1', '--oneline', action='store_true', help='Display 1 line of info for each VM' )
    p.add( '-a', '--all',     action='store_true', help='Retrieve all known VMs' )
    p.add( '-v', '--verbose', action='count',      help='Display extended info' )
    p.add( '-R', '--refresh', action='store_true', help='Refresh storage info' )
    p.add( '--raw-text',      action='store_true', help='Do not format text for page')
    p.add( 'vm', nargs='*',                        help='VM names, if not all' )

    args = p.parse()
    if not args.all and not args.vm:
        vsl.printerr( 'Specify VM names or -a (--all)' )
        sys.exit( 1 )
    return args


def storage_size( storage ):
    # storage.committed includes disk extents but also vswap, logs, etc.
    # storage.unshared seems to include only disk extents
    # These values include storage across all snapshots
    comb = storage.uncommitted + storage.unshared
    return vsl.scale_size( comb )

def objtype( obj ):
    return getattr( obj, '_vimtype', type( obj ) )

def plural( text, n ):
    if abs( int( n ) ) != 1:
        text += 's'
    return text


stdindent  =  -17
indentL    = stdindent - 3
indentS    = " " * abs( indentL )
farindentL = stdindent - 10
farindentS = " " * abs( farindentL )

def p( *parm ):
    if parm[ 1 ] is None:
        return
    w = stdindent
    if isinstance( parm[ 0 ], (int, long) ):
        w = parm[ 0 ]
        parm = parm[ 1: ]
    end = '\n'
    if isinstance( parm[ -1 ], (str, unicode) ) and parm[ -1 ] == "":
        end  = ''
        parm = parm[ : -1 ]

    if len( parm ) > 1 and isinstance( parm[ 1 ], list):
        val = str.join( '\n' + farindentS + indentS + '   ', map( str, parm[ 1 ] ))
    else:
        val = str.join( ' ', map( str, parm[ 1: ] ) )
    s = '%*s : %s' % (w, parm[ 0 ], val )
    print( s, end=end )

def pi( *parm ):
    print( indentS, end="" )
    p( *parm )

def pf( label, dic, attrs, extra='' ):
    if label:
        p( label, extra )
    for n, attr in enumerate( attrs ):
        try:
            if n == 0 and label and not extra:
                fn = p
            else:
                fn = pi

            if type( attr ) is tuple:
                fn( farindentL, attr[0], dic[ attr[1] ] )
            else:
                fn( farindentL, attr, dic[ attr ] )

        except KeyError:
            pass


class DisplayVM( object ):
    def __init__( self, vsi, vmprops, cmdargs, sep="" ):
        self.vsi = vsi
        self.vm = vsl.pseudoPropAttr.deep( vmprops )
        self.verbose  = cmdargs.verbose
        self.raw_text = cmdargs.raw_text
        self.sep = sep
        self.display()

    def display( self ):
        vm = self.vm

        self.display_name()
        self.display_location()
        self.display_resource_pool()
        if self.verbose:
            p( 'Guest family', vm.config.guestId )
        p( 'Guest type', vm.config.guestFullName )
        self.display_hw_ver()
        self.display_cpu()
        self.display_mem()
        try:
            # Since we requested these individual attributes, there might
            # not have been any value returned by the property collector if
            # they were undefined, even though they would have been present
            # if we collected all of vm.summary.config.
            # In the former case these attributes wouldn't exist here.
            p( 'NICs',    vm.summary.config.numEthernetCards )
            p( 'Disks',   vm.summary.config.numVirtualDisks )
        except AttributeError:
            pass
        self.display_storage()
        if vm.layoutEx.snapshot:
            p( 'Snapshots', len( vm.layoutEx.snapshot ))
        try:
            p( 'Nested HV', vm.config.nestedHVEnabled )
        except AttributeError:
            pass
        self.display_host()
        self.display_power_state()
        self.display_networks()
        self.display_disks()

        if self.verbose:
            try:
                if vm.snapshot:
                    self.display_snapshot_tree()
            except AttributeError:
                pass
            self.display_filesystems()
            self.display_dns()
            self.display_tools()
            self.display_power_ops()
            self.display_flags()
            self.display_guest()
            if self.verbose > 1:
                self.display_extraconfig_props()
            else:
                self.display_vnc()
                self.display_guestinfo_props()
            self.display_annotation()

        self.display_question()
        print( self.sep )

    def display_name( self ):
        if self.vm.config.template:
            p( 'VM Name', self.vm.name, '    [TEMPLATE]' )
        else:
            p( 'VM Name', self.vm.name )
            try:
                hn = self.vm.guest.hostName
                if hn and hn != self.vm.name:
                    p( 'VM Guest Name', hn )
            except AttributeError:
                pass

    def display_location( self ):
        vm      = self.vm
        vm_conf = self.vm.config

        p( 'VM moId', vm._moId )
        if self.verbose:
            p( 'SMBIOS UUID', vm_conf.uuid)
        p( 'Instance UUID', vm_conf.instanceUuid )
        if self.verbose:
            try:
                if vm_conf.locationId:
                    p( 'Location UUID', vm_conf.locationId)
            except AttributeError:
                pass
            p( 'Config modtime', vm_conf.changeVersion )
        p( 'VMX', vm_conf.files.vmPathName )

        try:
            folder = folder_map[ vm.parent ]
            p( 'Folder', folder )
        except (AttributeError, KeyError):
            pass

    def display_resource_pool( self ):
        try:
            resourcePool = self.vm.resourcePool
            p( 'Resource Pool', moId_map[ resourcePool._moId ] )
        except KeyError:
            p( 'Resource Pool', resourcePool._moId )
        except AttributeError:
            pass

    def display_hw_ver( self ):
        hw_ver = self.vm.config.version[ 4: ]  # skip 'vmx-'
        if hw_ver[ 0 ] == '0':
            hw_ver = hw_ver[ 1: ]
        try:
            hw_desc = '\t({})'.format( hw_compat[ hw_ver ][0] )
        except KeyError:
            hw_desc = ""
        hw_ver += hw_desc
        p( 'HW version',  hw_ver )

    def display_cpu( self ):
        vm_conf = self.vm.config
        hw_conf = self.vm.config.hardware
        numCPU  = hw_conf.numCPU

        coreargs = [plural( 'core', numCPU )]
        if getattr( hw_conf, 'numCoresPerSocket', None ):
            nsockets = numCPU / hw_conf.numCoresPerSocket
            coreargs.append( plural('%d socket' % nsockets, nsockets ))
        if getattr( vm_conf, 'cpuHotAddEnabled', False ):
            coreargs.append( 'hot add enabled' )
        if getattr( vm_conf, 'cpuHotRemoveEnabled', False ):
            coreargs.append( 'hot remove enabled' )

        p( 'CPU', numCPU, str.join( ', ', coreargs ) )

    def display_mem( self ):
        memoryMB = self.vm.config.hardware.memoryMB
        memargs = [ vsl.scale_size( memoryMB * 2**20 ) ]
        if getattr( self.vm.config, 'memoryHotAddEnabled', False ):
            memargs.append( 'hot add enabled' )
        p( 'Memory', str.join( ', ', memargs ))

    def display_storage( self ):
        used = vsl.scale_size( self.vm.summary.storage.unshared )
        prov = storage_size( self.vm.summary.storage )
        usage = '{} / {}'.format( used, prov )
        p( 'Storage', usage )

    def display_host( self ):
        host = self.vm.summary.runtime.host
        try:
            p( 'Hypervisor', moId_map[ host._moId ] )
        except KeyError:
            p( 'Hypervisor', host._moId )

    def display_power_state( self ):
        rt_conf = self.vm.summary.runtime
        p( 'Boot delay',  self.vm.config.bootOptions.bootDelay, "ms" )
        p( 'State',       rt_conf.powerState )
        try:
            p( 'Boot time', rt_conf.bootTime )
        except AttributeError:
            pass

    def display_tools( self ):
        try:
            t = self.vm.config.tools
            t.toolsInstallType = t.toolsInstallType.replace( 'guestToolsType', '' )
        except AttributeError:
            pass
        pf( 'Tools ', self.vm.config.tools,
            ( ('Power On' ,  'afterPowerOn'),
              ('Resume'   ,  'afterResume'),
              ('Standby'  ,  'beforeGuestStandby'),
              ('Shutdown' ,  'beforeGuestShutdown'),
              ('Reboot'   ,  'beforeGuestReboot'),
              ('syncTime' ,  'syncTimeWithHost'),
              ('Tools type', 'toolsInstallType'),
              ('Upgrade'  ,  'toolsUpgradePolicy'), ))

    def display_guest( self ):
        pf( 'Guest Tools', self.vm.guest,
            ( ('Tools Status',    'toolsStatus'),
              ('Running Status',  'toolsRunningStatus'),
              ('Version Status',  'toolsVersionStatus'),
              ('Version Status2', 'toolsVersionStatus2'),
              ('Version',         'toolsVersion'),
              ('State',           'guestState'),
            ))
        cap = self.vm.capability
        pi( farindentL, 'Auto-update supported',  cap.toolsAutoUpdateSupported )
        try:
            pf( 'Screen', self.vm.guest.screen,
                 ( ('Width',    'width'),
                   ('Height',  'height'),
                 ))
            pf( '', cap,
                 ( ('Set resolution supported', 'settingScreenResolutionSupported'),
                   ('Set topology supported',   'settingDisplayTopologySupported'),
                 ))
        except AttributeError:
            pass

    def display_flags( self ):
        pf( 'Flags', self.vm.config.flags,
            sorted( ( 'disableAcceleration',
                      'enableLogging',
                      'runWithDebugInfo',
                      'monitorType',
                      'htSharing',
                      'snapshotDisabled',
                      'snapshotLocked',
                      'diskUuidEnabled',
                      'virtualMmuUsage',
                      'virtualExecUsage',
                      'snapshotPowerOffBehavior',
                      'faultToleranceType', )))

    def display_power_ops( self ):
        pf( 'Power Ops', self.vm.config.defaultPowerOps,
            sorted( ( 'powerOffType',
                      'suspendType',
                      'resetType',
                      'defaultPowerOffType',
                      'defaultSuspendType',
                      'defaultResetType',
                      'standbyAction', )))

    def display_vnc( self ):
        try:
            vnc = self.vm.config.extraConfig.RemoteDisplay.vnc
        except AttributeError: # no vnc config
            return
        if getattr( vnc, 'key', False ):
            vnc.key = '(set)'
        else:
            vnc.key = 'None'
        pf( 'VNC', vnc,
            ( 'enabled',
              'port',
              'key', ))

    def display_extraconfig_props( self ):
        try:
            prop = dict( self.vm.config.extraConfig.fullitems() )
        except AttributeError: # no extraconfig
            return
        for key in prop:
            try:
                val = prop[ key ]
                if val == '':
                    val = ' '
                elif val.find( '\n' ) > 0:
                    val = [ s.strip( '\t\r' ) for s in val.split( '\n' ) ]
                    val = str.join( '\\n', val )
                prop[ key ] = val
            except AttributeError:
                pass
        pf( 'ExtraConfig', prop, sorted( prop ))

    def display_guestinfo_props( self ):
        try:
            prop = self.vm.config.extraConfig.guestinfo.fullitems()
        except AttributeError: # no extraconfig or guestinfo
            return
        if prop:
            dprop = {}
            for (key, val) in prop:
                val = val.strip( ' \t\r' )
                if val.find( '\n' ) > 0:
                    val = [ s.strip() for s in val.split( '\n' ) ]
                    val = str.join( '\\n', val )
                dprop[ key ] = '"{}"'.format( val )
            pf( 'GuestInfo', dprop, sorted( dprop ))

    def display_dns( self ):
        dns_list = self.vsi.vmguest_dns_config( self.vm )
        for dns in dns_list:
            if not dns[ 'domain' ]:
                dns[ 'domain' ] = ' '
            pf( 'DNS', dns,
                 ( 'domain',
                   'server',
                   'search', ))

    def display_networks( self ):
        eth = vim.vm.device.VirtualEthernetCard
        sw_map = { eth.NetworkBackingInfo                : 'vSwitch',
                   eth.DistributedVirtualPortBackingInfo : 'dvportgroup', }

        if self.verbose:
            routes = self.vsi.vmguest_ip_routes( self.vm )
        else:
            routes = None

        for nic in self.vsi.vmguest_nic_info( self.vm ):
            try:
                backing = sw_map[ objtype( nic[ 'backing' ] ) ]
            except KeyError:
                backing = 'unknown switch type'

            pf( nic[ 'label' ], nic,
                ( 'macAddress', ),
                extra='{} on "{}" ({})'.format(
                    nic[ 'type' ], nic[ 'netlabel' ], backing) )


            if self.verbose:
                obj = nic[ 'obj' ]
                con = obj.connectable
                pi( farindentL, 'wakeOnLanEnabled',  obj.wakeOnLanEnabled )
                pi( farindentL, 'startConnected',    con.startConnected )
                pi( farindentL, 'connected',         con.connected )
                pi( farindentL, 'allowGuestControl', con.allowGuestControl )

            cidr = nic.get( 'ip' )
            if cidr:
                pi( farindentL, 'IP Addresses', cidr )

            if routes:
                nicroutes = routes.pop( 0 )
                if not nicroutes:
                    continue

                formatted = []
                #width = max( len( elt.get( 'network', '' )) for elt in nicroutes )
                width = 0
                for elt in nicroutes:
                    gw = elt.get( 'gateway', None )
                    if gw:
                        s = '{1:<{0}} via {2}'.format( width, elt[ 'network' ], gw )
                    else:
                        s = elt[ 'network' ]
                    formatted.append( s )
                pi( farindentL, 'Routes', formatted )


    def display_disks( self ):
        for disk in self.vsi.vmguest_disk_info( self.vm ):
            disk[ 'capacity' ]  = vsl.scale_size( disk[ 'capacity' ] );
            disk[ 'allocated' ] = vsl.scale_size( disk[ 'allocated' ] );

            vfrcache = 'vflash read cache'
            try:
                desc = '{}, blk={}'.format(
                    vsl.scale_size( disk[ 'vflash_reserve' ] ),
                    vsl.scale_size( disk[ 'vflash_blksz'   ] ) )
                disk[ vfrcache ] = desc
            except KeyError:
                pass

            pf( disk[ 'label' ], disk,
                ( 'capacity',
                  'allocated',
                  'device',
                  'backing',
                  'deviceName',
                  'diskMode',
                  vfrcache, ),
                extra=disk[ 'fileName' ] )

    # n.b. linux guest tools only return local diskful filesystems.
    # nfs, tmpfs, etc. mounts are not provided.
    def display_filesystems( self ):
        if not self.vm.guest.disk:
            return

        def _scale_size( size ):
            res = vsl.scale_size( size, roundp=False, minimize=True )
            return res.replace( 'iB', '' ).replace( ' ', '' )

        fmt = '{:>8}  {:>8}  {:>3}%  {}'
        line = [ fmt.format( 'Size', 'Avail', 'Use', 'Mount' ) ]
        for fs in self.vm.guest.disk:
            total = _scale_size( fs.capacity )
            avail = _scale_size( fs.freeSpace )
            upct  = int( 100 - (100 * fs.freeSpace) / float( fs.capacity ))
            line.append( fmt.format( total, avail, upct, fs.diskPath ))
        l = str.join( '\n' + indentS, line )
        p( 'Filesystems', l )

    def display_snapshot_tree( self ):
        vm_snapshot = self.vm.snapshot

        def walktree( fn, snap_list=vm_snapshot.rootSnapshotList, depth=0 ):
            result = []
            for snap in snap_list:
                result.append( fn( snap, depth ))
                result.extend( walktree( fn, snap.childSnapshotList, depth+1 ))
            return result

        snapshot_list = walktree( lambda x, _: x )

        def maxlen( attr ):
            return max( len( str( getattr( x, attr ))) for x in snapshot_list )

        verbose     = self.verbose
        indent_incr = 2
        max_depth   = 1 + max( walktree( lambda _, depth: depth ))
        max_namelen = maxlen( 'name' ) + max_depth * indent_incr
        max_desc_col = 78 + indentL  # n.b. indentL is negative

        def snap_timestamp( snap ):
            ct = snap.createTime.replace( microsecond=0, tzinfo=None )
            fmt = '%Y-%m-%d %H:%M:%SZ' if verbose > 1 else '%y-%m-%d %H:%M'
            return ct.strftime( fmt )

        def format_snapshot( snap, indent=0, depth=0 ):
            indent = depth * indent_incr
            num    = '#{}'.format( snap.id )
            name   = '"{}"'.format( snap.name )
            ts     = snap_timestamp( snap )
            fmt    = '{0}* {3:{2:d}} {4} {5:>4}'
            w      = max( 2, max_namelen - indent )
            head   = fmt.format( ' ' * indent, num, w, name, ts, num )

            res = [ head ]
            if verbose > 1:
                indent += 2
                ws = ' ' * indent
                if self.raw_text:
                    desc = snap.description
                else:
                    desc = vsl.fold_text( snap.description, indent=indent, maxlen=max_desc_col-indent )
                if desc:
                    res.append( ws + desc )
                res.append( '' )
            return res

        def format_snaplist( snaplist=vm_snapshot.rootSnapshotList, indent=0, depth=0 ):
            formatted = []
            for snap in snaplist:
                formatted.extend( format_snapshot( snap, indent=indent, depth=depth ))

                subindent = indent + indent_incr + len( str( snap.id ) )
                formatted.extend( format_snaplist( snap.childSnapshotList,
                                                   indent=subindent,
                                                   depth=depth+1 ))
            return formatted


        tree = '\n'.join( format_snaplist() ).replace( '\n', '\n' + indentS ).rstrip()
        p( 'Snapshot tree', tree )

        cur = [ x for x in snapshot_list
                if x.snapshot == vm_snapshot.currentSnapshot ][ 0 ]
        p( 'Current snapshot', '#{} "{}"'.format( cur.id, cur.name ))

    def _display_text( self, label, text, *options ):
        if self.raw_text:
            if text.find ("\n") >= 0:
                text = "\n\n" + text
        else:
            text = vsl.fold_text( text, maxlen=70, indent=abs( indentL ) )
        if text != "":
            p( label, text )
        if options:
            print()
            for choice in options:
                print( indentS, choice )

    def display_annotation( self ):
        try:
            self._display_text( 'Annotation', self.vm.config.annotation )
        except:
            pass

    def display_question( self ):
        try:
            question = self.vm.summary.runtime.question
            choices = [ '\t[{}] {}'.format( choice.key, choice.summary )
                        for choice in question.choice.choiceInfo ]
            try:
                choices[ question.choice.defaultIndex ] += ' (default)'
            except (KeyError, AttributeError):
                pass
            self._display_text( 'Question', question.text, *choices )
        except AttributeError:
            pass


class DisplayVMs_1line( object ):
    def __init__( self, vmlist, verbose ):
        self.verbose = verbose or 0

        fields = [
            [ 'P',          '_powerstate',            '',     ' ' ],
            [ 'VM',          'name',                  ':{}',      ],
            [ 'C',          'config.hardware.numCPU', ':>{}',     ],
            [ 'MEM',        '_mem',                   ':>{}',     ],
            [ 'DISK',       '_vmdk',                  ':>{}',     ],
            [ 'HW',         '_hw_version',            ':>{}',     ],
            [ 'TYPE',       'config.guestId',         ':{}',      ],
            [ 'MAC',        '_mac',                   ':{}',      ],
            [ 'IP',         'guest.ipAddress',        ':{}',      ],
            [ 'HOSTNAME',   '_gue_name',              ':{}',      ],
            [ 'HYPERVISOR', '_hyp_name',              '',         ],
        ]
        if not verbose:
            for elt in fields[ : ]:
                if elt[ 0 ] in ( 'HW', 'TYPE', 'MAC', 'HYPERVISOR' ):
                    fields.remove( elt )
        elif verbose > 1:
            for elt in fields[ : ]:
                if elt[ 0 ] in ( 'MEM', 'DISK' ):
                    elt[ 0 ] = elt[ 0 ] + '(M)'

        maxlen = { f[ 1 ] : len( f[ 0 ] ) for f in fields }

        vmlist = [ vsl.pseudoPropAttr.deep( vm ) for vm in vmlist ]
        timer = vsl.Timer( '1line.prep' )
        for vm in vmlist:
            self.prep_elt( vm )
            for field in ( elt[ 1 ] for elt in fields ):
                l = len( str( vm[ field ] ))
                maxlen[ field ] = max( maxlen.get( field, 0 ), l )
        timer.report()

        fmtlist = []
        for i, elt in enumerate( fields ):
            fmtelt = elt[ 2 ].format( maxlen[ elt[ 1 ]])
            fmtlist.append( '{{{}}}'.format( fmtelt ) )
            if i+1 < len( fields ):
                sep = elt[ 3 ] if len( elt ) > 3 else '  '
                fmtlist.append( sep )

        self.fmt = ''.join( fmtlist )
        self.fields = [ field[ 1 ] for field in fields ]

        timer = vsl.Timer( 'print' )
        if vmlist:
            header = [ f[0] for f in fields ]
            print( self.fmt.format( *header ))
        for vm in vmlist:
            self.display( vm )
        timer.report()

    def prep_elt( self, vm ):
        # guest.ipAddress can be on an unreachable, disconnected interface.
        # We're not interested in those unless there's really nothing else.
        for elt in vm.guest.net:
            if elt.network and elt.ipAddress:
                vm.guest.ipAddress = sorted( elt.ipAddress )[0]
                vm._mac            = elt.macAddress
                break
        else:
            vm.guest.ipAddress = '-'
            try:
                vm._mac = vm.guest.net[0].macAddress
            except IndexError:
                vm._mac = '-'

        vm.config.guestId = self.guestId( vm )
        vm._powerstate    = self.powerstate( vm )
        vm._mem           = self.memsize( vm )
        vm._vmdk          = self.scale_size( vm.summary.storage.unshared
                                             + vm.summary.storage.uncommitted,
                                            roundp=True)
        vm._hw_version    = self.hw_version( vm.config.version )

        vm._gue_name = self._get( vm, 'guest.hostName' )
        if not self.verbose:
            vm._gue_name = self.sans_fqdn( vm._gue_name )

        host = vm.runtime.host
        try:
            vm._hyp_name = moId_map[ host._moId ]
            if not self.verbose:
                vm._hyp_name = self.sans_fqdn( vm._hyp_name )
        except KeyError:
            vm._hyp_name = host._moId

    @staticmethod
    def _get( vm, name ):
        try:
            return vm[ name ].replace( ' ', '_' )
        except AttributeError:
            return vm[ name ]
        except KeyError:
            return '-'

    @staticmethod
    def sans_fqdn( s ):
        e = s.find( '.' )
        if e >= 0:
            return s[ 0 : e ]
        return s

    @staticmethod
    def hw_version( version):
        return version.replace( 'vmx-0', '' ).replace( 'vmx-', '' )

    def powerstate( self, vm ):
        if vm.config.template:                    return '+'
        if vm.runtime.powerState == 'poweredOff': return 'o'
        return '|'  # u'\u23fd' # U23FD POWER ON SYMBOL

    def guestId( self, vm ):
        try:
            # guest.guestId might be ''
            s = vm.guest.guestId or vm.config.guestId
        except AttributeError:
            s = vm.config.guestId

        # All guestids:
        #	cr = vsi.get_obj( [vim.ComputeResource] )[ 0 ]
        #	qco = cr.environmentBrowser.QueryConfigOption()
        #	set( x.id.replace('Guest','') for x in qco.guestOSDescriptor )
        s = s.replace( 'Guest',         '' )
        s = s.replace( 'solaris',       'sol' )
        s = s.replace( 'windows',       'win' )
        s = s.replace( 'Enterprise',    'ent' )
        s = s.replace( 'Server',        'srv' )
        return s

    def scale_size( self, size_bytes, roundp=False ):
        sz = vsl.scale_size( size_bytes,
                             forceunit = 'M' if self.verbose > 1 else None,
                             roundp    = roundp,
                             minimize  = True )
        sz = sz.replace( 'iB', '' )
        sz = sz.replace( ' ',  '' )
        return sz

    def memsize( self, vm ):
        return self.scale_size( vm.config.hardware.memoryMB * 1024**2 )

    def display( self, vm ):
        args   = [ self._get( vm, name ) for name in self.fields ]
        print( self.fmt.format( *args ) )


def init_folder_map( vsi ):
    timer = vsl.Timer('init folder map')
    p2f = vsi.path_to_subfolder_map( 'vm' )
    global folder_map
    folder_map = vsl.inverted_dict ( p2f )
    timer.report()

def init_moId_map( vsi ):
    timer = vsl.Timer('init moId map')
    global moId_map
    moId_map = { elt[ 'obj' ]._moId : elt[ 'name' ]
                 for elt in vsi.get_obj_props( moId_types, [ 'name' ] ) }
    timer.report()


def get_vmlist( vsi, props=None, root=None ):
    return vsi.get_obj_props( [ vim.VirtualMachine ],
                              props              = props,
                              root               = root,
                              ignoreInvalidProps = True, )

def display_vmlist( vsi, vmlist, args ):
    if args.oneline:
        DisplayVMs_1line( vmlist, args.verbose )
    else:
        sep = '-' * 78
        n = len( vmlist )
        timer = vsl.Timer( 'print' )
        for vm in vmlist:
            n -= 1
            if not n:
                sep = ""
            DisplayVM( vsi, vm, args, sep=sep )
        timer.report()

def main():
    args = get_args()
    vsi  = vsl.vmomiConnect( args )

    if args.oneline:
        props = proplist_1line
    else:
        props = list( proplist )
        if args.verbose:
            props.extend( proplist_verbose )

    if args.vm:
        # On first pass, we sort and record the results found from each
        # param (which may be a wildcard), but maintain the overall order
        # as provided.  Afterward we use this to sort the results from the
        # property collector on the second pass.
        pass1 = []
        for pat in args.vm:
            res = vsi.find_vm( pat )
            if len( res ) > 1:
                res.sort( key=lambda elt: elt.name )
            pass1.extend( res )
        if not pass1:
            return
        if args.refresh and not args.oneline:
            timer = vsl.Timer( 'vm.refresh' )
            for vm in pass1:
                vm.RefreshStorageInfo()
            timer.report()

        vmlist = get_vmlist( vsi, props, root=pass1 )

        timer = vsl.Timer( 'sort' )
        order = { vm : i for i, vm in enumerate( pass1 ) }
        vmlist.sort( key=lambda elt: order[ elt[ 'obj' ]])
        timer.report()
    else:
        vmlist = get_vmlist( vsi, props )
        timer = vsl.Timer( 'sort' )
        # Sort all names, then group all templates at the end.
        vmlist.sort( key=lambda elt: elt[ 'name' ] )
        vmlist.sort( key=lambda elt: elt[ 'config.template' ] != 'true' )
        timer.report()

    init_moId_map( vsi )
    if not args.oneline:
        init_folder_map( vsi )
    display_vmlist( vsi, vmlist, args )


##########

if __name__ == '__main__':
    main()

# eof
