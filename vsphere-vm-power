#!/usr/bin/env python
# $Id: vsphere-power-cmd,v 1.2 2018/03/23 20:12:39 friedman Exp $

from __future__ import print_function
from vspherelib import *

cmds = { 'on'          : 'PowerOn',
         'off'         : 'PowerOff',

         'vm-reboot'   : 'RebootGuest',
         'vm-suspend'  : 'StandbyGuest',  # vmsvc/hibernate ?
         'vm-shutdown' : 'ShutdownGuest',

         'reset'       : 'Reset',
         'suspend'     : 'Suspend',
         'resume'      : 'PowerOn', }


def get_args():
    parser = get_args_setup()
    parser.add_argument( '-c', '--command', required=True, choices=cmds, help='Command to perform on virtual machines')
    parser.add_argument( 'vm', nargs='*', help='optional vm names, default display all' )

    args = parser.parse_args()
    if not args.vm:
        printerr( 'Specify VM name(s)' )
        sys.exit (1)

    return args


def main():
    args = get_args()
    si   = hconnect( args )

    vmlist = get_obj( si, [vim.VirtualMachine], { 'name' : args.vm } )
    if not vmlist:
        return

    op = getattr( type( vmlist[0] ), cmds[args.command] )
    tasklist = []
    for vm in vmlist:
        try:
            task = op( vm )
            if task:
                tasklist.append( task )
        except vmodl.MethodFault as e:
            printerr( vm.name, e.msg )
        except Exception as e:
            printerr( 'Caught Exception', str( e ))

    if tasklist:
        succ = taskwait( si, tasklist )
        if not succ:
            sys.exit( 1 )

if __name__ == '__main__':
    main()

# eof
