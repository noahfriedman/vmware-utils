#!/usr/bin/env python
# $Id: vsphere-vm-power,v 1.7 2018/08/04 05:15:56 friedman Exp $

from   __future__ import print_function
from   pyVmomi    import vim, vmodl
import vspherelib     as vsl
import sys

cmds = { 'on'          : 'PowerOn',
         'off'         : 'PowerOff',

         'vm-reboot'   : 'RebootGuest',
         'vm-suspend'  : 'StandbyGuest',  # vmsvc/hibernate ?
         'vm-shutdown' : 'ShutdownGuest',

         'reset'       : 'Reset',
         'suspend'     : 'Suspend',
         'resume'      : 'PowerOn', }


def get_args():
    p = vsl.ArgumentParser()
    p.add( 'cmd', choices=cmds,   help='Command to perform on virtual machines' )
    p.add( 'vm',  nargs='+',      help='VM name(s)' )
    return p.parse()

def main():
    args = get_args()
    vsi  = vsl.vmomiConnect( args )

    vmlist = vsi.find_vm( args.vm )
    if not vmlist:
        return

    op = getattr( type( vmlist[ 0 ] ), cmds[ args.cmd ] )
    tasklist = []
    for vm in vmlist:
        try:
            task = op( vm )
            if task:
                tasklist.append( task )
        except vmodl.MethodFault as e:
            vsl.printerr( vm.name, e.msg )
        except Exception as e:
            vsl.printerr( 'Caught Exception', str( e ))

    if tasklist:
        succ = vsi.taskwait( tasklist )
        if not succ:
            sys.exit( 1 )

if __name__ == '__main__':
    main()

# eof
