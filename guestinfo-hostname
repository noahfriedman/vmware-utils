#!/bin/sh
# guestinfo-hostname - set hostname from VMware guestinfo
# Author: Noah Friedman <friedman@splode.com>
# Created: 2019-07-19
# Public domain

# $Id$

### BEGIN INIT INFO
# Provides:          guestinfo-hostname
# Required-Start:
# Required-Stop:
# X-Start-Before:    $network $netdaemons
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Set hostname from VMware guestinfo
# Description:       set hostname from VMware guestinfo
### END INIT INFO

# chkconfig: 2345 01 99
# description:	set hostname from VMware guestinfo

# To add/remove using chkconfig:
#	chkconfig --add guestinfo-hostname
#	chkconfig --del guestinfo-hostname
# To add/remove using insserv:
# 	insserv --default guestinfo-hostname
#	insserv --remove  guestinfo-hostname
# Using update-rc.d:
# 	update-rc.d    guestinfo-hostname defaults
#	update-rc.d -f guestinfo-hostname remove

# To enable with systemd, create /etc/systemd/system/guestinfo-hostname.service
# with the following lines:
#	[Unit]
#	Description=Set hostname from vmware guestinfo attributes before bringing up network
#	SourcePath=/etc/systemd/system/guestinfo-hostname
#	Before=graphical.target
#	Before=network-online.target
#	Before=network.target
#	Before=network-pre.target
#	Before=systemd-networkd.service
#	Before=systemd-networkd.socket
#	Before=update-issue.service
#
#	[Service]
#	Type=oneshot
#	Restart=no
#	TimeoutSec=10s
#	RemainAfterExit=no
#	SuccessExitStatus=0
#	ExecStart=/etc/systemd/system/guestinfo-hostname
#
#	[Install]
#	WantedBy=multi-user.target
#
# Install this script in the same directory rather than /etc/init.d,
# then run:
#	systmectl enable guestinfo-hostname.service

# To run automatically on MacOS:
# Please the following in /Library/LaunchDaemons/com.splode.guestinfo_hostname.plist :
#
#	<?xml version="1.0" encoding="UTF-8"?>
#	<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
#	<plist version="1.0">
#	<dict>
#		<key>Label</key>
#		<string>com.splode.guestinfo_hostname</string>
#		<key>ProgramArguments</key>
#		<array>
#			<string>/etc/guestinfo-hostname</string>
#		</array>
#		<key>Disabled</key>
#		<false/>
#		<key>KeepAlive</key>
#		<false/>
#		<key>RunAtLoad</key>
#		<true/>
#	</dict>
#	</plist>
#
# Make sure the shell script is owned by root:wheel and mode 0755.
# Make sure the plist file is owned by root:wheel and mode 0644.
# Then run: launchctl load -w /Library/LaunchDaemons/com.splode.guestinfo_hostname.plist

vmtools_macos='/Library/Application Support/VMware Tools'
PATH=/usr/bin:/usr/sbin:$vmtools_macos:$PATH

: ${U_NODENAME:=`uname -n`}
: ${U_SYSTEM:=`uname -s`}

info_get()
{
    case $U_SYSTEM in
        Darwin ) vmware-tools-daemon --cmd="info-get $*" ;;
        *      ) vmware-rpctool            "info-get $*" ;;
    esac 2> /dev/null
}

iface_primary()
{
    ip -o -f inet route list match 0 | sed -e 's/.* dev \([^ ][^ ]*\).*/\1/';
}

restart_iface()
{
    iface=`iface_primary`
    case $iface in '' ) return ;; esac

    if { type ifdown && type ifup; } > /dev/null 2>&1; then
        ifdown $iface
        ifup   $iface
    else
        # systemd-networkd has no support for bringing a single interface
        # up and down.  This is about the best we can do.
        ip link set $iface down
        ip link set $iface up
    fi
}

set_hostname()
{
    new=$1
    cur=$curHostname

    # If new hostname is not a fqdn, but the old hostname was, then
    # reuse the old fqdn with the new name.
    case $new in
        *.* ) : ;;
        *   ) case $cur in
                  *.* ) new=$new.${cur#*.} ;;
              esac ;;
    esac

    case $U_SYSTEM in
        Darwin )
            scutil --set HostName      $new        # primary hostname
            scutil --set LocalHostName ${new%%.*}  # bonjour hostname
            scutil --set ComputerName  ${new%%.*}  # finder  hostname
            dscacheutil -flushcache
            ;;

        Linux  )
            # Record for future reboots
            if   [ -f /etc/hostname ]; then echo $new > /etc/hostname
            elif [ -f /etc/HOSTNAME ]; then echo $new > /etc/HOSTNAME
            elif [ -f /etc/sysconfig/network ]; then
                sed -i -e "s/^\(HOSTNAME\)=.*/\1=$new/" /etc/sysconfig/network
            fi

            hostname $new
            restart_iface
            ;;
    esac
}

set_forceHostname()
{
    case ${forceHostname:+isset}:$curHostname in
        isset:$forceHostname ) return 1 ;; # forced name is already current
        isset:* ) set_hostname $forceHostname; return $? ;;
        *:* ) return 1 ;;
    esac
}

set_initHostname()
{
    case ${initHostname:+isset}:$curHostname in
        isset:*-template.* | isset:*-template )
            set_hostname $initHostname
            return $? ;;
    esac
    return 0
}

main()
{
    case $1 in
        stop | status ) exit 0 ;;
    esac

    forceHostname=`info_get guestinfo.forceHostname`
    initHostname=`info_get  guestinfo.initHostname`
    curHostname=$U_NODENAME

    set_forceHostname || set_initHostname
}

main "$@" || :

# eof
