#!/usr/bin/env python
# $Id: vsphere-clone,v 1.2 2018/03/13 06:22:25 friedman Exp $

from __future__ import print_function
from vspherelib import *

import os
import sys

##########
class Stuff: pass

##########
def get_args():
    parser = get_args_setup()
    parser.add_argument(       '--template',  required=True, help='Name of template or vm to clone from' )
    parser.add_argument( '-v', '--vm-name',   required=True, help='Name for new vm' )
    parser.add_argument( '--vm-folder',       required=True, help='(optional) Path of vSphere folder for vm to appear' )
    parser.add_argument( '--resource-pool',                  help='Resource pool for vm' )
    parser.add_argument( '--datacenter',                     help='Name of the datacenter to use' )
    parser.add_argument( '--datastore',       required=True, help='Name of datastore for vm storage' )
    parser.add_argument( '--cluster',                        help='Name of the cluster or hypervisor host for new vm' )

    args = parser.parse_args()
    return args


##########
def get_folder( vm, path ):
    dc         = get_obj( vm.si, [vim.Datacenter] )
    rootFolder = dc[0].vmFolder
    folder     = rootFolder

    for subdir in path.split( "/" ):
        folder = get_obj( vm.si, [vim.Folder], { 'name' : subdir }, root=folder, recur=False )
        if not folder:
            return rootFolder

    return folder

##########
def get_datastore( vm, datastore_name ):
    if not datastore_name:
        datastore_name = vm.template.datastore[0].info.name
    ds = get_obj( vm.si, [vim.Datastore], { 'name' : datastore_name } )
    return ds

def get_cluster( vm, cluster_name ):
    cr = get_obj( vm.si, [vim.ComputeResource], { 'name' : cluster_name } )
    return cr


##########
def vmclone( si, template, opt ):
    vm = Stuff()
    vm.opt        = opt
    vm.si         = si
    vm.template   = template

    vm.datacenter = get_obj( si, [vim.Datacenter], { 'name' : opt.datacenter } )
    vm.datastore  = get_datastore( vm, opt.datastore )
    vm.folder     = get_folder(    vm, opt.vm_folder )
    vm.cluster    = get_cluster(   vm, opt.cluster)

    #     if resource_pool:
    #         resource_pool = get_obj(content, [vim.ResourcePool], resource_pool)
    #     else:
    #         resource_pool = cluster.resourcePool

    vmconf = vim.vm.ConfigSpec()

    # FIXME
    computeResource = get_obj( si, [vim.ComputeResource], { 'name' : 'gala.perforce.com' } )
    resource_pool   = computeResource.resourcePool
    host            = computeResource.host[0]

    relospec           = vim.vm.RelocateSpec()
    relospec.datastore = datastore
    relospec.pool      = resource_pool
    relospec.host      = host

    clonespec          = vim.vm.CloneSpec()
    clonespec.location = relospec
    clonespec.powerOn  = False

    task = template.Clone( folder=destfolder, name=opt.vm_name, spec=clonespec )
    return task


##########
def main():
    args     = get_args()
    si       = hconnect( args )

    template = get_obj( si, [vim.VirtualMachine], { 'name' : args.template } )

    if template:
        task = vmclone( si, template[0], args )
        taskswait( si, task )
    else:
        print( 'template not found' )

if __name__ == "__main__":
    main()

# eof
