#!/usr/bin/env python
# $Id: vsphere-clone,v 1.3 2018/04/11 04:55:43 friedman Exp $

from __future__ import print_function
from vspherelib import *

import os
import sys

##########
class Stuff: pass

##########
def get_args():
    parser = get_args_setup()
    parser.add_argument(       '--template',  required=True, help='Name of template or vm to clone from' )
    parser.add_argument( '-v', '--vm-name',   required=True, help='Name for new vm' )
    parser.add_argument( '--vm-folder',       required=True, help='Path of vSphere folder for vm to appear' )
    parser.add_argument( '--pool',                           help='Resource pool for vm' )
    parser.add_argument( '--datacenter',                     help='Name of the datacenter to use' )
    parser.add_argument( '--datastore',                      help='Name of datastore for vm storage' )
    parser.add_argument( '--cluster',                        help='Name of the cluster or hypervisor host for new vm' )

    args = parser.parse_args()
    return args


##########

# If name is null but there is only one object of that type anyway, just return that.
def _get_single_vim( si, vimtype, label, name ):
    def err( *msg ):
        printerr( *msg )
        printerr( 'Available %ss:' % (label) )
        res = get_obj( si, vimtype )
        names = [elt.name for elt in res]
        for n in sorted( names ):
            printerr( "\t" + n )
        exit( 1 )
    res = None
    if name:
        res = get_obj( si, vimtype, { 'name' : name } )
        if res is None:
            err( name, '%s not found.' % (label) )
        if len( res ) > 1:
            err( name, 'name is not unique.' )
    else:
        res = get_obj( si, vimtype )
        if res is None:
            raise LookupError, "No %ss found!" % ( label )
        if len( res ) > 1:
            err( 'More than one %s exists; specify %s to use.' % ( label, label ))
    return res[0]


def get_datacenter( si, name ):
    return _get_single_vim( si, [vim.Datacenter], 'datacenter', name )

def get_datastore( si, name ):
    return _get_single_vim( si, [vim.Datastore], 'datastore', name )

def get_cluster( si, name ):
    return _get_single_vim( si, [vim.ComputeResource], 'cluster', name )

def get_pool( si, name ):
    return _get_single_vim( si, [vim.ResourcePool], 'resource pool', name )


##########
def vmclone( si, template, opt ):
    vm = Stuff()

    datacenter = get_datacenter( si, opt.datacenter )
    datastore  = get_datastore(  si, opt.datastore )
    folder     = path_to_folder( si, opt.vm_folder )
    cluster    = get_cluster(    si, opt.cluster)

    if opt.pool:
        pool = get_pool( si, opt.pool )
    else:
        pool = vm.cluster.resourcePool

    relospec           = vim.vm.RelocateSpec()
    relospec.datastore = datastore
    relospec.pool      = pool

    clonespec          = vim.vm.CloneSpec()
    clonespec.location = relospec
    clonespec.powerOn  = False

    task = template.Clone( folder=folder, name=opt.vm_name, spec=clonespec )
    return task


##########
def main():
    args = get_args()
    si   = hconnect( args )

    template = get_obj( si, [vim.VirtualMachine], { 'name' : args.template } )
    if template:
        task = vmclone( si, template[0], args )
        if task:
            taskwait( si, task )
    else:
        print( 'template not found' )

if __name__ == "__main__":
    main()

# eof
