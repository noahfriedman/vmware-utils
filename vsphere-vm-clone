#!/usr/bin/env python
# $Id$

import argparse
import atexit
import getpass
import os
import ssl
import sys

from pyVim         import connect as pyVconnect
from pyVmomi       import vim

##########
class Stuff:
    pass

##########
def get_args():
    env = os.environ

    parser = argparse.ArgumentParser()
    parser.add_argument( '-s', '--host',     required=True,          help='vCenter server host' )
    parser.add_argument( '-o', '--port',     default=443, type=int,  help='Server connection' )
    parser.add_argument( '-u', '--user',     default=env['LOGNAME'], help='Server user name' )
    parser.add_argument( '-p', '--password',                         help='Server user password' )
    parser.add_argument(       '--template',  required=True, help='Name of template or vm to clone from' )
    parser.add_argument( '-v', '--vm-name',   required=True, help='Name for new vm' )
    parser.add_argument( '--vm-folder',        help='(optional) Path of vSphere folder for vm to appear' )
    parser.add_argument( '--resource-pool',    help='Resource pool for vm' )
    parser.add_argument( '--datacenter',       help='Name of the datacenter to use' )
    parser.add_argument( '--datastore',        help='Name of datastore for vm storage' )
    parser.add_argument( '--cluster',          help='Name of the cluster or hypervisor host for new vm' )

    args = parser.parse_args()
    if args.password:
        pass
    elif os.getenv( 'VMPASSWD' ):
        args.password = os.getenv( 'VMPASSWD' )
    else:
        prompt = 'Enter password for %(user)s@%(host)s: ' % vars( args )
        args.password = getpass.getpass( prompt )

    return args


##########
def connect( args ):
    try:
       context = None
       if hasattr( ssl, '_create_unverified_context' ):
          context = ssl._create_unverified_context()

       si = pyVconnect.SmartConnect( host = args.host,
                                     user = args.user,
                                     pwd  = args.password,
                                     port = int( args.port ),
                                     sslContext = context )
    except Exception as e:
        print( 'Could not connect to vCenter host' )
        print( repr( e ) )
        sys.exit( 1 )

    atexit.register( pyVconnect.Disconnect, si )

    return si


##########
def get_obj( content, vimtype, name=None, root=None, recur=True ):
    try:              name = unicode( name, 'utf-8' )
    except TypeError: pass

    if root is None:
        root = content.rootFolder

    cvM = content.viewManager
    container = cvM.CreateContainerView( root, vimtype, recur )
    if name is None:
        return container.view

    for obj in container.view:
        if obj.name == name:
            return obj

    return None

##########
def get_folder( vm, path ):
    dc         = get_obj( vm.content, [vim.Datacenter] )
    rootFolder = dc[0].vmFolder
    folder     = rootFolder

    for subdir in path.split( "/" ):
        folder = get_obj( vm.content, [vim.Folder], subdir, root=folder, recur=False )
        if not folder:
            return rootFolder

    return folder

##########
def get_datastore( vm, datastore_name ):
    if not datastore_name:
        datastore_name = vm.template.datastore[0].info.name

    ds = get_obj( vm.content, [vim.Datastore], datastore_name )
    return ds

##########
def vmclone( template, opt, content ):
    vm = Stuff()
    vm.opt        = opt
    vm.content    = content
    vm.template   = template

    vm.datacenter = get_obj( content, [vim.Datacenter], opt.datacenter )
    vm.datastore  = get_datastore( vm, opt.datastore )
    vm.folder     = get_folder(    vm, opt.vm_folder )
    vm.cluster    = get_cluster( vm, opt.cluster)

    #     if resource_pool:
    #         resource_pool = get_obj(content, [vim.ResourcePool], resource_pool)
    #     else:
    #         resource_pool = cluster.resourcePool

    vmconf = vim.vm.ConfigSpec()

    computeResource = get_obj(content, [vim.ComputeResource], "gala.perforce.com")
    resource_pool = computeResource.resourcePool
    host          = computeResource.host[0]

    relospec           = vim.vm.RelocateSpec()
    relospec.datastore = datastore
    relospec.pool      = resource_pool
    relospec.host      = host

    clonespec          = vim.vm.CloneSpec()
    clonespec.location = relospec
    clonespec.powerOn  = False

    task = template.Clone( folder=destfolder, name=vm_name, spec=clonespec )
    return task


##########
def taskwait( task ):
    while True:
        if task.info.state == 'success':
            return task.info.result

        if task.info.state == 'error':
            print "there was an error"
            return None

def taskswait( tasks, si ):
    pc  =  si.content.propertyCollector
    vpc = vmodl.query.PropertyCollector

    taskList = [str(task) for task in tasks]

    # Create filter
    objSpecs = [vpc.ObjectSpec( obj=task ) for task in tasks]
    propSpec = vpc.PropertySpec( type=vim.Task, pathSet=[], all=True )
    filterSpec           = vpc.FilterSpec()
    filterSpec.objectSet = objSpecs
    filterSpec.propSet   = [propSpec]
    filter = pc.CreateFilter( filterSpec, True )

    try:
       version, state = None, None
       # Loop looking for updates till the state moves to a completed state.
       while len( taskList ):
           update = pc.WaitForUpdates( version )
           for filterSet in update.filterSet:
               for objSet in filterSet.objectSet:
                   task = objSet.obj
                   for change in objSet.changeSet:
                       if   change.name == 'info':
                           state = change.val.state
                       elif change.name == 'info.state':
                           state = change.val
                       else:
                           continue

                       if not str( task ) in taskList:
                           continue

                       if state == vim.TaskInfo.State.success:
                           taskList.remove( str( task ) )
                       elif state == vim.TaskInfo.State.error:
                           raise task.info.error
           version = update.version
    finally:
        if filter:
            filter.Destroy()

##########
def main():
    args     = get_args()
    si       = connect( args )
    content  = si.RetrieveContent()
    template = get_obj( content, [vim.VirtualMachine], args.template )

    if template:
        task = vmclone( template, args, content )
        taskswait( [task], si )
    else:
        print "template not found"

if __name__ == "__main__":
    main()

# eof
