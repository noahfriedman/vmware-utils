#!/usr/bin/env python
# $Id: vsphere-vmrc,v 1.4 2018/07/19 00:48:39 friedman Exp $

from   __future__ import print_function

from   pyVmomi    import vim
import vspherelib     as vsl

import os
import sys
import time

def get_args():
    parser = vsl.ArgumentParser()
    parser.add_argument( 'vmnames', nargs='*',          help='vm names' )
    parser.add_argument( '--uri',  action='store_true', help='display URIs instead of launching' )
    args = parser.parse_args()
    if not args.vmnames:
        printerr( 'Specify VM name(s)' )
        sys.exit( 1 )
    return args


def spawn(*args):
    pid = os.fork()
    if pid == 0: # child
        os.chdir( os.getenv( 'HOME' ) )
        os.execlp( args[0], *args )
    else:
        return pid


def launch( mks, vmlist ):
    for vm in vmlist:
        uri = mks.uri_vmrc( vm=vm )
        pid = spawn( 'vmware', '--new-window', uri )
    # Background ourselves for a while to keep session tickets active, then exit.
    pid = os.fork()
    if pid == 0:
        time.sleep( 30 )
        sys.exit( 0 )
    else:
        os._exit( 0 )


def display( mks, vmlist ):
    for vm in vmlist:
        print( mks.uri_vmrc( vm=vm ) )
        print( '' )
        print( mks.uri_html( vm=vm ) )
        print( '' )
        if len( vmlist ) > 1:
            print( '\n' )
    # The tickets are only good until session is disconnected.
    print( 'You have 2 minutes to connect before ticket expires.' )
    time.sleep( 60 )
    print( '1 minute remaining before ticket expires.' )
    time.sleep( 60 )


def main():
    args = get_args()
    vsi  = vsl.vmomiConnect( args )
    mks  = vsi.mks( args )

    vmlist = vsi.find_vm( args.vmnames )
    if args.uri:
        display( mks, vmlist )
    else:
        launch( mks, vmlist )

if __name__ == '__main__':
    main()
