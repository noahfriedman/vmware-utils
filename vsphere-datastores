#!/usr/bin/env python
# $Id: vsphere-datastores,v 1.3 2018/04/11 04:56:09 friedman Exp $

from __future__ import print_function

from vspherelib import *

props = [ 'summary.name',
          'summary.capacity',
          'summary.freeSpace',
          'summary.uncommitted' ]

def get_args():
    parser = get_args_setup()
    args = parser.parse_args()
    return args

def cmpdsname(a, b):
    aL = a[ 'summary.name' ].split( '-' )
    bL = b[ 'summary.name' ].split( '-' )
    i = 0
    m = re.compile( '^([0-9]+)[MGT]B$' )
    while i < len( aL ) and i < len( bL ):
        ae = aL[i]
        be = bL[i]
        am = m.match( ae )
        bm = m.match( be )
        if am and bm:
            i += 1
            continue

        res = (ae > be) - (be > ae)
        if res != 0:
            return res

        i += 1
    res = (len( aL ) > len( bL )) - (len( bL ) > len( aL ))
    return res

def main():
    args = get_args()
    si   = hconnect( args )

    ds = get_obj_props( si, [vim.Datastore], props )

    maxlen = max( map( lambda x: len( x['summary.name'] ), ds ) )
    fmt = ' '.join(( '{0:%s}' % maxlen,
                     '{1[0]:>5} {1[1]:>3} total,',
                     '{2[0]:>5} {2[1]:>3} ({3:2d}%) free,',
                     '{4[0]:>5} {4[1]:>3} ({5:3d}%) uncommitted' ))

    for elt in sorted( ds, cmp=cmpdsname ):
        name = elt['summary.name']
        size = int( elt['summary.capacity'] )
        free = int( elt['summary.freeSpace'] )
        ucom = int( elt['summary.uncommitted'] )

        s = fmt.format( name,
                        scale_size( size ).split( ' ' ),

                        scale_size( free ).split( ' ' ),
                        100 * free / size,

                        scale_size( ucom ).split( ' '),
                        100 * ucom / size )
        print( s )


##########

if __name__ == '__main__':
    main()

# eof
