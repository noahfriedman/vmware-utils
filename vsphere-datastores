#!/usr/bin/env python
# vsphere-datastores --- show datastore capacity and usage

# Author: Noah Friedman <friedman@splode.com>
# Created: 2018-03-30
# Public domain

# $Id: vsphere-datastores,v 1.10 2018/11/15 01:52:47 friedman Exp $

# Commentary:
# Code:

from   __future__ import print_function
from   pyVmomi    import vim
import vspherelib     as vsl
import re

props = [ 'summary.name',
          'summary.capacity',
          'summary.freeSpace',
          'summary.uncommitted' ]

# The empty string fields are removed later, but are included initially as
# placeholders since the size and percent columns are joined together.
column_labels = [ 'NAME',
                  'SIZE',
                  'PROVISIONED', '',
                  'FREE',        '',
                  'UNPROVISIONED']


def get_args():
    p = vsl.ArgumentParser( loadrc=True )
    p.add_bool( '-H', '--header', help='Show column headers' )
    p.add( 'pattern',  nargs='*', help='Datastore names or patterns' )
    return p.parse()


# Match 1 to 3 digits not preceded by or followed by other digits.
# The negative assertions are required to anchor the match to the start of
# a digit sequence, not something in the middle of a sequence of digits
# which just happens to consist of 1 to 3 of them.
re_lt999  = re.compile( '(?<!\d)(\d{1,3})(?!\d)' )
re_ds_cap = re.compile( '\d+[KMGTPE]i?B', flags=re.I )

# The motivation for this particular sort key was one IT group's habit of
# naming volumes as "<group>-<san>-VMFS-<cap>-<n>" where <n> was a
# volume number.  For all volumes in the same <group>/<san> combo, I
# wanted the ordering of <n> to matter, but not <cap>.
def key_ds_name( elt ):
    # Strip out any volume sizes in name; we can see that in a separate column.
    s = re_ds_cap.sub( '', elt[ 'summary.name' ] )
    # Pad remaining numbers less than 4 digits wide with leading zeroes,
    # so that a lexicographic ordering will not put "10" before "2".
    return re_lt999.sub( lambda m: '{:04d}'.format( int( m.group( 1 ))), s )


def show_header( width, sep='  ' ):
    for _ in range( column_labels.count( '' ) ):
        column_labels.remove( '' )

    hwidth = [ max( len( a ), b )
               for a, b in zip( column_labels,
                                [     *width[0:2],
                                  sum( width[2:4], 4 ),
                                  sum( width[4:6], 4 ),
                                      *width[6:],
                                ])]
    hfmt = (sep.join( [ '{{:>{}}}'.format( n ) for n in hwidth ] )
               .replace( '>', '<', 1 ) )
    print( hfmt.format( *column_labels ).rstrip() )


def main():
    args = get_args()
    vsi  = vsl.vmomiConnect( args )

    container = vsi.search_by_name( args.pattern, objtype=[vim.Datastore]
                                   ) if args.pattern else None
    ds = vsi.get_obj_props( [vim.Datastore], props, root=container )
    if not ds:
        return

    data = []
    for elt in sorted( ds, key=key_ds_name ):
        name =      elt['summary.name']
        size = int( elt['summary.capacity'] )
        free = int( elt['summary.freeSpace'] )
        try: # may be unavailable if e.g. 'summary.accessible' is false
            ucom = int( elt['summary.uncommitted'] )
        except KeyError:
            ucom = 0

        used  = size - free
        prov  = used + ucom            # provisioned
        uprov = max( 0, size - prov )  # unprovisioned, or 0 if over

        data.append( [ name,
                       vsl.scale_size( size ),
                       vsl.scale_size( prov ), int( 100 * prov / size ),
                       vsl.scale_size( free ), int( 100 * free / size ),
                       vsl.scale_size( uprov ), ])

    # Don't show the unprovisioned column at all if none of the datastores
    # have any unprovisioned space.
    if all( row[-1] == '0' for row in data ):
        column_labels.pop()
        for row in data: row.pop()

    if args.header:
        data.append( column_labels )

    sep  = '    '
    fill = { 0    : '<',
             3    : '({{:>{}}}%)',
             5    : '({{:>{}}}%)',
             None : '>', }
    fmt, width = vsl.mkrowfmt( data, sep=sep, fill=fill )
    fmt = fmt.replace( sep + '(', ' (' )

    if args.header:
        data.pop()
        show_header( width, sep=sep )

    for row in data:
        if row[-1] == '0': row[-1] = ''
        print( fmt.format( *row ).rstrip() )

##########

if __name__ == '__main__':
    main()

# vsphere-datastores ends here
