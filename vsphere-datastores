#!/usr/bin/env python
# vsphere-datastores --- show datastore capacity and usage

# Author: Noah Friedman <friedman@splode.com>
# Created: 2018-03-30
# Public domain

# $Id: vsphere-datastores,v 1.10 2018/11/15 01:52:47 friedman Exp $

# Commentary:
# Code:

from   __future__ import print_function
from   pyVmomi    import vim
import vspherelib     as vsl
import re

props = [ 'summary.name',
          'summary.capacity',
          'summary.freeSpace',
          'summary.uncommitted' ]

def get_args():
    p = vsl.ArgumentParser( loadrc=True )
    p.add_bool( '-H', '--header', help='Show column headers' )
    p.add( 'pattern',  nargs='*', help='Datastore names or patterns' )
    return p.parse()


# Match 1 to 3 digits not preceded by or followed by other digits.
# The negative assertions are required to anchor the match to the start of
# a digit sequence, not something in the middle of a sequence of digits
# which just happens to consist of 1 to 3 of them.
re_lt999  = re.compile( '(?<!\d)(\d{1,3})(?!\d)' )
re_ds_cap = re.compile( '\d+[KMGTPE]i?B', flags=re.I )

# The motivation for this particular sort key was one IT group's habit of
# naming volumes as "<group>-<san>-VMFS-<cap>-<n>" where <n> was a
# volume number.  For all volumes in the same <group>/<san> combo, I
# wanted the ordering of <n> to matter, but not <cap>.
def key_ds_name( elt ):
    # Strip out any volume sizes in name; we can see that in a separate column.
    s = re_ds_cap.sub( '', elt[ 'summary.name' ] )
    # Pad remaining numbers less than 4 digits wide with leading zeroes,
    # so that a lexicographic ordering will not put "10" before "2".
    return re_lt999.sub( lambda m: '{:04d}'.format( int( m.group( 1 ))), s )


def main():
    args = get_args()
    vsi  = vsl.vmomiConnect( args )

    container = vsi.search_by_name( args.pattern, objtype=[vim.Datastore]
                                   ) if args.pattern else None
    ds = vsi.get_obj_props( [vim.Datastore], props, root=container )
    if not ds:
        return

    maxlen = max( map( lambda x: len( x['summary.name'] ), ds ) )
    if args.header:
        hfmt = ' '.join(('{0:%s}' % maxlen,
                        '{1:>10}',
                        '    {2:>17}',
                        '    {3:>18}'))
        s = hfmt.format( 'NAME', 'SIZE', 'FREE', 'UNCOMMITTED' )
        print( s )

    fmt = ' '.join(( '{0:%s}' % maxlen,
                     '{1[0]:>6} {1[1]:>3}',
                     '    {2[0]:>7} {2[1]:>3} ({3:2d}%)',
                     '    {4[0]:>7} {4[1]:>3} ({5:3d}%)' ))

    for elt in sorted( ds, key=key_ds_name ):
        name = elt['summary.name']
        size = int( elt['summary.capacity'] )
        free = int( elt['summary.freeSpace'] )
        try: # Not sure why this can sometimes be unavailable
            ucom = int( elt['summary.uncommitted'] )
        except KeyError:
            ucom = 0

        s = fmt.format( name,
                        vsl.scale_size( size ).split( ' ' ),

                        vsl.scale_size( free ).split( ' ' ),
                        int( 100 * free / size ),

                        vsl.scale_size( ucom ).split( ' '),
                        int( 100 * ucom / size ))
        print( s )


##########

if __name__ == '__main__':
    main()

# vsphere-datastores ends here
