#!/usr/bin/env python
# $Id: vsphere-vm-tags,v 1.3 2018/07/21 20:48:24 friedman Exp $

# This uses the vSphere Automation SDK for Python as well as pyVmomi.

from __future__ import print_function

import requests
import ssl
import simplejson                               as json

import com.vmware.cis_client                    as cis_client
import com.vmware.cis.tagging_client            as tagging_client

from   vmware.vapi.lib.connect              import get_requests_connector
from   vmware.vapi.security.session         import create_session_security_context
from   vmware.vapi.security.user_password   import create_user_password_security_context
from   vmware.vapi.stdlib.client.factories  import StubConfigurationFactory

from   requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings( InsecureRequestWarning )

import vspherelib                               as vsl
from   pyVmomi                              import vim

class vapiConnect():
    def __init__( self, host=None, user=None, passwd=None ):
        self.host   = host
        self.user   = user
        self.passwd = passwd
        self.connect()

    def connect( self ):
        host_url = "https://{}/api".format( self.host )
        self.session        = requests.Session()
        self.session.verify = False
        self.connector   = get_requests_connector( session=self.session, url=host_url )
        self.stub_config = StubConfigurationFactory.new_std_configuration( self.connector )
        self.login()

    def login( self ):
        # Pass user credentials (user/password) in the security context to authenticate.
        self.userpass_ctx = create_user_password_security_context(self.user, self.passwd)
        self.stub_config.connector.set_security_context( self.userpass_ctx )
        # Create the stub for the session service and login by creating a session.
        self.session_id = cis_client.Session( self.stub_config ).create()
        # Successful authentication.  Store the session identifier in the security
        # context of the stub and use that for all subsequent remote requests
        self.session_ctx = create_session_security_context( self.session_id )
        self.stub_config.connector.set_security_context( self.session_ctx )

    def logout( self ):
        if self.stub_config:
            session_svc = cis_client.Session( self.stub_config )
            session_svc.delete()
            self.stub_config = None

    def __del__( self ):
        self.logout()

    def vmid_to_owner_tag_map( self ):
        cat_svc   = tagging_client.Category(       self.stub_config )
        tag_svc   = tagging_client.Tag(            self.stub_config )
        tag_assoc = tagging_client.TagAssociation( self.stub_config )
        result = {}

        cats = [ cat_svc.get( cat ) for cat in cat_svc.list() ]
        for cat in cats:
            if cat.name == 'Owners':
                owners_id = cat.id
                break

        tag_ids = tag_svc.list_tags_for_category( owners_id )
        for tag_id in tag_ids:
            tag = tag_svc.get( tag_id )
            owner = tag.name
            # Calling list_attached_objects per tag is slow.
            # vsphere 6.0 doesn't support
            vm_ids = map( lambda obj: obj.id,
                          filter( lambda obj: obj.type == 'VirtualMachine',
                                  tag_assoc.list_attached_objects( tag_id )))
            for vm_id in vm_ids:
                try:
                    result[ vm_id ] += ", " + owner
                except KeyError:
                    result[ vm_id ] = owner
        return result


def main():
    args = vsl.ArgumentParser().parse_args()
    vsi  = vsl.vmomiConnect( args )

    t = vsl.Timer('vapiConnect')
    vpi  = vapiConnect( host   = args.host,
                        user   = args.user,
                        passwd = args.password )
    t.report()

    t = vsl.Timer('vmid_to_owner_tag_map')
    vmid2owner = vpi.vmid_to_owner_tag_map()
    t.report()

    obj_props = [ 'name',
                  #'config.template',
                  #'runtime.powerState',
                  'guest.guestState',
                  'guest.hostName',
                  'guest.ipAddress', ]

    t = vsl.Timer("get_obj_props")
    vmlist = vsi.get_obj_props( [vim.VirtualMachine], obj_props )
    t.report()
    #print(vmlist)

    t = vsl.Timer('make vmtbl')
    vmtbl = {}
    for vm in vmlist:
        if vm[ 'guest.guestState' ] != 'running':
            continue
        del vm[ 'guest.guestState' ]

        vmtbl[ vm.pop( 'name' ) ] = vm
        vmid = vm.pop( 'obj' )._moId
        vm[ 'owner'    ] = vmid2owner[ vmid ]
        try:
            vm[ 'hostname' ] = vm.pop( 'guest.hostName' )
        except KeyError:
            pass

        try:
            vm[ 'ip'       ] = vm.pop( 'guest.ipAddress' )
        except KeyError:
            pass

    t.report()

    t = vsl.Timer("generate json")
    out = json.dumps( vmtbl, sort_keys=True, indent='    ', check_circular=False)
    t.report()

    print( out )

if __name__ == '__main__':
    main()

# eof
